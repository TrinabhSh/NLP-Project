{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d305130a",
   "metadata": {},
   "source": [
    "# Inserting all the Important Libraries "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "185b01a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "lemmatizer = WordNetLemmatizer()\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.tokenize import word_tokenize\n",
    "from nltk.corpus import opinion_lexicon\n",
    "stop_words = stopwords.words(\"english\")\n",
    "from nltk.stem.snowball import SnowballStemmer\n",
    "sn_stemmer = SnowballStemmer(\"english\")\n",
    "import nltk\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.cluster import KMeans\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import confusion_matrix\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0a628bfc",
   "metadata": {},
   "outputs": [],
   "source": [
    "my_reviews_dataset = pd.read_csv('Reviews_Dataset.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "44809b09",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rating</th>\n",
       "      <th>Reviews</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>Great CD</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>One of the best game music soundtracks - for a...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>Batteries died within a year ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>works fine, but Maha Energy is better</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>Great for the non-audiophile</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9995</th>\n",
       "      <td>2</td>\n",
       "      <td>Really Enjoyed it!</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9996</th>\n",
       "      <td>1</td>\n",
       "      <td>Disappointing PC interface/software</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9997</th>\n",
       "      <td>2</td>\n",
       "      <td>Love it Love it Love it</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9998</th>\n",
       "      <td>1</td>\n",
       "      <td>Faulty leg causing distress for my baby</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9999</th>\n",
       "      <td>2</td>\n",
       "      <td>Fantastic Entertainer</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10000 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Rating                                            Reviews\n",
       "0          2                                           Great CD\n",
       "1          2  One of the best game music soundtracks - for a...\n",
       "2          1                   Batteries died within a year ...\n",
       "3          2              works fine, but Maha Energy is better\n",
       "4          2                       Great for the non-audiophile\n",
       "...      ...                                                ...\n",
       "9995       2                                 Really Enjoyed it!\n",
       "9996       1                Disappointing PC interface/software\n",
       "9997       2                            Love it Love it Love it\n",
       "9998       1            Faulty leg causing distress for my baby\n",
       "9999       2                              Fantastic Entertainer\n",
       "\n",
       "[10000 rows x 2 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_reviews_dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6399eda4",
   "metadata": {},
   "source": [
    "# Cleaning the Text "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2b858246",
   "metadata": {},
   "outputs": [],
   "source": [
    "def function(x):\n",
    "    x = str(x)\n",
    "    x = x.lower()\n",
    "    y=nltk.word_tokenize(x)\n",
    "    temp=[]\n",
    "    for i in y:\n",
    "        if i in stopwords.words(\"english\"): \n",
    "             pass\n",
    "        else:\n",
    "             temp.append(i)\n",
    "    stop=' '.join(temp)\n",
    "    \n",
    "    c=nltk.word_tokenize(stop)\n",
    "    temp2=[]\n",
    "    for i in c:\n",
    "        temp2.append((sn_stemmer.stem(i)))\n",
    "    lem=' '.join(temp2)\n",
    "\n",
    "    temp4 = []\n",
    "    for i in lem:\n",
    "        if i.isdigit():\n",
    "            pass\n",
    "        else:\n",
    "            temp4.append(i)\n",
    "    num =''.join(temp4)\n",
    "    return num"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "51079f27",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'lm gift , cr hardwork'"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function('LM10 is gifted, CR7 is hardwork')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ab3d1b35",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "my_reviews_dataset['Cleansed_Message'] = my_reviews_dataset['Reviews'].apply(function)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "36595535",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rating</th>\n",
       "      <th>Reviews</th>\n",
       "      <th>Cleansed_Message</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>Great CD</td>\n",
       "      <td>great cd</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>One of the best game music soundtracks - for a...</td>\n",
       "      <td>one best game music soundtrack - game n't real...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>Batteries died within a year ...</td>\n",
       "      <td>batteri die within year ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>works fine, but Maha Energy is better</td>\n",
       "      <td>work fine , maha energi better</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>Great for the non-audiophile</td>\n",
       "      <td>great non-audiophil</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9995</th>\n",
       "      <td>2</td>\n",
       "      <td>Really Enjoyed it!</td>\n",
       "      <td>realli enjoy !</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9996</th>\n",
       "      <td>1</td>\n",
       "      <td>Disappointing PC interface/software</td>\n",
       "      <td>disappoint pc interface/softwar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9997</th>\n",
       "      <td>2</td>\n",
       "      <td>Love it Love it Love it</td>\n",
       "      <td>love love love</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9998</th>\n",
       "      <td>1</td>\n",
       "      <td>Faulty leg causing distress for my baby</td>\n",
       "      <td>faulti leg caus distress babi</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9999</th>\n",
       "      <td>2</td>\n",
       "      <td>Fantastic Entertainer</td>\n",
       "      <td>fantast entertain</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10000 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Rating                                            Reviews  \\\n",
       "0          2                                           Great CD   \n",
       "1          2  One of the best game music soundtracks - for a...   \n",
       "2          1                   Batteries died within a year ...   \n",
       "3          2              works fine, but Maha Energy is better   \n",
       "4          2                       Great for the non-audiophile   \n",
       "...      ...                                                ...   \n",
       "9995       2                                 Really Enjoyed it!   \n",
       "9996       1                Disappointing PC interface/software   \n",
       "9997       2                            Love it Love it Love it   \n",
       "9998       1            Faulty leg causing distress for my baby   \n",
       "9999       2                              Fantastic Entertainer   \n",
       "\n",
       "                                       Cleansed_Message  \n",
       "0                                              great cd  \n",
       "1     one best game music soundtrack - game n't real...  \n",
       "2                           batteri die within year ...  \n",
       "3                        work fine , maha energi better  \n",
       "4                                   great non-audiophil  \n",
       "...                                                 ...  \n",
       "9995                                     realli enjoy !  \n",
       "9996                    disappoint pc interface/softwar  \n",
       "9997                                     love love love  \n",
       "9998                      faulti leg caus distress babi  \n",
       "9999                                  fantast entertain  \n",
       "\n",
       "[10000 rows x 3 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_reviews_dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "056a5d72",
   "metadata": {},
   "outputs": [],
   "source": [
    "pos_words = set(opinion_lexicon.positive())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "93980a91",
   "metadata": {},
   "outputs": [],
   "source": [
    "neg_words = set(opinion_lexicon.negative())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "37f06cbb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'deserving',\n",
       " 'galore',\n",
       " 'defeats',\n",
       " 'dextrous',\n",
       " 'grandeur',\n",
       " 'fruitful',\n",
       " 'glowing',\n",
       " 'gloriously',\n",
       " 'innovation',\n",
       " 'eminence',\n",
       " 'avid',\n",
       " 'groundbreaking',\n",
       " 'playfully',\n",
       " 'reconcile',\n",
       " 'restructured',\n",
       " 'noble',\n",
       " 'influential',\n",
       " 'crisp',\n",
       " 'bountiful',\n",
       " 'trustingly',\n",
       " 'realizable',\n",
       " 'supports',\n",
       " 'trump',\n",
       " 'dumbfounding',\n",
       " 'lyrical',\n",
       " 'extoll',\n",
       " 'outstandingly',\n",
       " 'superior',\n",
       " 'notably',\n",
       " 'promise',\n",
       " 'ilu',\n",
       " 'spellbinding',\n",
       " 'brilliantly',\n",
       " 'significant',\n",
       " 'slick',\n",
       " 'fairly',\n",
       " 'traction',\n",
       " 'wonderous',\n",
       " 'endorsing',\n",
       " 'problem-solver',\n",
       " 'solicitously',\n",
       " 'inpressed',\n",
       " 'self-sufficiency',\n",
       " 'jaw-dropping',\n",
       " 'faithful',\n",
       " 'attractively',\n",
       " 'affectation',\n",
       " 'empathize',\n",
       " 'ambitiously',\n",
       " 'rectification',\n",
       " 'astonishing',\n",
       " 'fondly',\n",
       " 'propitious',\n",
       " 'fine',\n",
       " 'tender',\n",
       " 'expansive',\n",
       " 'envy',\n",
       " 'lifesaver',\n",
       " 'integral',\n",
       " 'vouch',\n",
       " 'plush',\n",
       " 'brighter',\n",
       " 'poeticize',\n",
       " 'durable',\n",
       " 'protective',\n",
       " 'proper',\n",
       " 'benefit',\n",
       " 'originality',\n",
       " 'ultra-crisp',\n",
       " 'wholesome',\n",
       " 'win',\n",
       " 'productive',\n",
       " 'refreshed',\n",
       " 'promised',\n",
       " 'suavely',\n",
       " 'scenic',\n",
       " 'expertly',\n",
       " 'gratified',\n",
       " 'cashbacks',\n",
       " 'willingly',\n",
       " 'expeditiously',\n",
       " 'bonuses',\n",
       " 'prefers',\n",
       " 'beauty',\n",
       " 'lucidly',\n",
       " 'adaptive',\n",
       " 'entertains',\n",
       " 'evenly',\n",
       " 'fine-looking',\n",
       " 'admirer',\n",
       " 'jubilant',\n",
       " 'examplary',\n",
       " 'accolades',\n",
       " 'affability',\n",
       " 'gratifies',\n",
       " 'revival',\n",
       " 'passion',\n",
       " 'cooperatively',\n",
       " 'amity',\n",
       " 'sufficiently',\n",
       " 'exuberant',\n",
       " 'effusion',\n",
       " 'trendy',\n",
       " 'cohere',\n",
       " 'handsome',\n",
       " 'zippy',\n",
       " 'amicability',\n",
       " 'luxuriously',\n",
       " 'gentlest',\n",
       " 'compassion',\n",
       " 'fortunate',\n",
       " 'elate',\n",
       " 'valiant',\n",
       " 'pinnacle',\n",
       " 'standout',\n",
       " 'envious',\n",
       " 'meticulously',\n",
       " 'prosper',\n",
       " 'exultation',\n",
       " 'sensibly',\n",
       " 'openness',\n",
       " 'sturdy',\n",
       " 'halcyon',\n",
       " 'upheld',\n",
       " 'astonishingly',\n",
       " 'prodigiously',\n",
       " 'renaissance',\n",
       " 'jubilation',\n",
       " 'accomplishment',\n",
       " 'accurate',\n",
       " 'effusive',\n",
       " 'sagely',\n",
       " 'encourage',\n",
       " 'fantastically',\n",
       " 'refined',\n",
       " 'terrifically',\n",
       " 'glad',\n",
       " 'pamperedly',\n",
       " 'toughest',\n",
       " 'effusiveness',\n",
       " 'hottest',\n",
       " 'bloom',\n",
       " 'earnest',\n",
       " 'hallowed',\n",
       " 'enviously',\n",
       " 'fave',\n",
       " 'sumptuousness',\n",
       " 'winning',\n",
       " 'thriving',\n",
       " 'promising',\n",
       " 'recommendation',\n",
       " 'coolest',\n",
       " 'peacekeepers',\n",
       " 'renewed',\n",
       " 'gumption',\n",
       " 'miraculousness',\n",
       " 'playful',\n",
       " 'exquisitely',\n",
       " 'complementary',\n",
       " 'witty',\n",
       " 'stylish',\n",
       " 'resilient',\n",
       " 'delectable',\n",
       " 'deginified',\n",
       " 'amusing',\n",
       " 'upgraded',\n",
       " 'eminent',\n",
       " 'jolly',\n",
       " 'appreciable',\n",
       " 'comfortably',\n",
       " 'benefits',\n",
       " 'well-known',\n",
       " 'shimmering',\n",
       " 'clear',\n",
       " 'compact',\n",
       " 'reaffirm',\n",
       " 'workable',\n",
       " 'fortitude',\n",
       " 'easier',\n",
       " 'mightily',\n",
       " 'favorable',\n",
       " 'softer',\n",
       " 'fancier',\n",
       " 'marvelously',\n",
       " 'beneficially',\n",
       " 'clear-cut',\n",
       " 'benifits',\n",
       " 'well-educated',\n",
       " 'lucrative',\n",
       " 'glitz',\n",
       " 'effortless',\n",
       " 'intimate',\n",
       " 'effortlessly',\n",
       " 'carefree',\n",
       " 'pleasing',\n",
       " 'savior',\n",
       " 'easing',\n",
       " 'ecstasies',\n",
       " 'unabashedly',\n",
       " 'elan',\n",
       " 'civility',\n",
       " 'rewardingly',\n",
       " 'tenacity',\n",
       " 'eagerly',\n",
       " 'excelent',\n",
       " 'precious',\n",
       " 'salute',\n",
       " 'modern',\n",
       " 'individualized',\n",
       " 'clearly',\n",
       " 'entrust',\n",
       " 'inviolate',\n",
       " 'adored',\n",
       " 'purify',\n",
       " 'refund',\n",
       " 'exonerate',\n",
       " 'high-spirited',\n",
       " 'admirably',\n",
       " 'irresistibly',\n",
       " 'luxuriate',\n",
       " 'tranquil',\n",
       " 'effectiveness',\n",
       " 'youthful',\n",
       " 'unparalleled',\n",
       " 'foresight',\n",
       " 'compliment',\n",
       " 'fanfare',\n",
       " 'finely',\n",
       " 'profusion',\n",
       " 'boom',\n",
       " 'bolster',\n",
       " 'cheaper',\n",
       " 'heartening',\n",
       " 'low-price',\n",
       " 'exceptionally',\n",
       " 'innovative',\n",
       " 'heartfelt',\n",
       " 'priceless',\n",
       " 'contentment',\n",
       " 'correct',\n",
       " 'effusively',\n",
       " 'incredibly',\n",
       " 'all-around',\n",
       " 'satisfactorily',\n",
       " 'felicity',\n",
       " 'gracious',\n",
       " 'blithe',\n",
       " 'masterfully',\n",
       " 'evocative',\n",
       " 'undaunted',\n",
       " 'illumine',\n",
       " 'succeeding',\n",
       " 'famed',\n",
       " 'masters',\n",
       " 'brave',\n",
       " 'rapturously',\n",
       " 'mind-blowing',\n",
       " 'gentle',\n",
       " 'hilarious',\n",
       " 'rapturous',\n",
       " 'euphorically',\n",
       " 'succes',\n",
       " 'prestige',\n",
       " 'honor',\n",
       " 'gallant',\n",
       " 'advocate',\n",
       " 'geekier',\n",
       " 'low-priced',\n",
       " 'pure',\n",
       " 'amazed',\n",
       " 'lush',\n",
       " 'accessible',\n",
       " 'cherished',\n",
       " 'inestimable',\n",
       " 'revolutionizes',\n",
       " 'trustworthy',\n",
       " 'preferably',\n",
       " 'accurately',\n",
       " 'cleanest',\n",
       " 'commendable',\n",
       " 'miraculously',\n",
       " 'magic',\n",
       " 'obsessions',\n",
       " 'fastest-growing',\n",
       " 'hands-down',\n",
       " 'aspiration',\n",
       " 'enjoyable',\n",
       " 'chivalry',\n",
       " 'excitedly',\n",
       " 'exaltedly',\n",
       " 'virtue',\n",
       " 'kindness',\n",
       " 'peerless',\n",
       " 'unconditional',\n",
       " 'realistic',\n",
       " 'well-received',\n",
       " 'picturesque',\n",
       " 'visionary',\n",
       " 'achievements',\n",
       " 'revolutionary',\n",
       " 'amuse',\n",
       " 'successes',\n",
       " 'resolute',\n",
       " 'jubilantly',\n",
       " 'confidence',\n",
       " 'aver',\n",
       " 'sweetheart',\n",
       " 'master',\n",
       " 'top',\n",
       " 'blessing',\n",
       " 'smitten',\n",
       " 'thankful',\n",
       " 'thrills',\n",
       " 'elegantly',\n",
       " 'resplendent',\n",
       " 'resounding',\n",
       " 'victorious',\n",
       " 'adroitly',\n",
       " 'selective',\n",
       " 'affirm',\n",
       " 'swank',\n",
       " 'respectable',\n",
       " 'wise',\n",
       " 'danken',\n",
       " 'terrific',\n",
       " 'compactly',\n",
       " 'crisper',\n",
       " 'undisputable',\n",
       " 'cleaner',\n",
       " 'luck',\n",
       " 'endorsement',\n",
       " 'large-capacity',\n",
       " 'titillatingly',\n",
       " 'radiant',\n",
       " 'applaud',\n",
       " 'nurturing',\n",
       " 'advantageous',\n",
       " 'dead-on',\n",
       " 'excited',\n",
       " 'intrigue',\n",
       " 'sleek',\n",
       " 'worked',\n",
       " 'beautify',\n",
       " 'satisfies',\n",
       " 'dreamland',\n",
       " 'glitter',\n",
       " 'ftw',\n",
       " 'astonished',\n",
       " 'precisely',\n",
       " 'whoooa',\n",
       " 'enrich',\n",
       " 'a+',\n",
       " 'hearten',\n",
       " 'well-being',\n",
       " 'beautifullly',\n",
       " 'assuring',\n",
       " 'succeeds',\n",
       " 'smilingly',\n",
       " 'economical',\n",
       " 'fabulous',\n",
       " 'innocuous',\n",
       " 'freedom',\n",
       " 'exceptional',\n",
       " 'hard-working',\n",
       " 'excites',\n",
       " 'harmless',\n",
       " 'resound',\n",
       " 'secure',\n",
       " 'simplifying',\n",
       " 'backbone',\n",
       " 'ardor',\n",
       " 'admiring',\n",
       " 'congenial',\n",
       " 'superiority',\n",
       " 'tops',\n",
       " 'heroize',\n",
       " 'eased',\n",
       " 'celebrate',\n",
       " 'vibrantly',\n",
       " 'invincible',\n",
       " 'talented',\n",
       " 'courageously',\n",
       " 'miracle',\n",
       " 'impressiveness',\n",
       " 'sumptuously',\n",
       " 'diversified',\n",
       " 'overture',\n",
       " 'salutary',\n",
       " 'positive',\n",
       " 'sharper',\n",
       " 'entertaining',\n",
       " 'memorable',\n",
       " 'cheer',\n",
       " 'gleeful',\n",
       " 'reliable',\n",
       " 'catchy',\n",
       " 'blissfully',\n",
       " 'handier',\n",
       " 'brainiest',\n",
       " 'propitiously',\n",
       " 'eloquence',\n",
       " 'luckier',\n",
       " 'elegance',\n",
       " 'commend',\n",
       " 'beloved',\n",
       " 'ample',\n",
       " 'humour',\n",
       " 'earnestness',\n",
       " 'unbound',\n",
       " 'autonomous',\n",
       " 'excels',\n",
       " 'exceeds',\n",
       " 'unmatched',\n",
       " 'suitable',\n",
       " 'upliftingly',\n",
       " 'sturdier',\n",
       " 'best-performing',\n",
       " 'delightfully',\n",
       " 'likes',\n",
       " 'attraction',\n",
       " 'imaginative',\n",
       " 'kindliness',\n",
       " 'clever',\n",
       " 'achievible',\n",
       " 'welcome',\n",
       " 'pretty',\n",
       " 'aspire',\n",
       " 'ingenuity',\n",
       " 'satisfactory',\n",
       " 'tantalizing',\n",
       " 'simplest',\n",
       " 'refresh',\n",
       " 'willing',\n",
       " 'enjoyably',\n",
       " 'spectacularly',\n",
       " 'beckon',\n",
       " 'enjoyment',\n",
       " 'smoother',\n",
       " 'undisputed',\n",
       " 'inspirational',\n",
       " 'meritorious',\n",
       " 'adorer',\n",
       " 'helpful',\n",
       " 'pamperedness',\n",
       " 'gaiety',\n",
       " 'ideally',\n",
       " 'responsibly',\n",
       " 'helping',\n",
       " 'hooray',\n",
       " 'prize',\n",
       " 'legendary',\n",
       " 'pleasurably',\n",
       " 'hug',\n",
       " 'beckoning',\n",
       " 'exceeded',\n",
       " 'heroine',\n",
       " 'whoa',\n",
       " 'reasoned',\n",
       " 'fortuitously',\n",
       " 'trouble-free',\n",
       " 'enthralled',\n",
       " 'gain',\n",
       " 'unlimited',\n",
       " 'headway',\n",
       " 'god-given',\n",
       " 'celebration',\n",
       " 'thrive',\n",
       " 'best-selling',\n",
       " 'thank',\n",
       " 'idealize',\n",
       " 'thrift',\n",
       " 'err-free',\n",
       " 'stabilize',\n",
       " 'desirable',\n",
       " 'outwit',\n",
       " 'capable',\n",
       " 'accomplishments',\n",
       " 'winnable',\n",
       " 'trusty',\n",
       " 'gorgeous',\n",
       " 'lucky',\n",
       " 'gutsy',\n",
       " 'exceled',\n",
       " 'honorable',\n",
       " 'energetic',\n",
       " 'simpler',\n",
       " 'smiling',\n",
       " 'apotheosis',\n",
       " 'idol',\n",
       " 'peps',\n",
       " 'rejuvenate',\n",
       " 'spotless',\n",
       " 'truthful',\n",
       " 'preferring',\n",
       " 'refinement',\n",
       " 'exellent',\n",
       " 'everlasting',\n",
       " 'generously',\n",
       " 'exuberance',\n",
       " 'affordably',\n",
       " 'thumb-up',\n",
       " 'swift',\n",
       " 'smoothly',\n",
       " 'adjustable',\n",
       " 'congratulation',\n",
       " 'stupendous',\n",
       " 'admiration',\n",
       " 'delightfulness',\n",
       " 'supurbly',\n",
       " 'enthusiasm',\n",
       " 'strong',\n",
       " 'heaven',\n",
       " 'healthy',\n",
       " 'generosity',\n",
       " 'intriguing',\n",
       " 'tickle',\n",
       " 'amazing',\n",
       " 'lionhearted',\n",
       " 'respect',\n",
       " 'daring',\n",
       " 'nicely',\n",
       " 'revitalize',\n",
       " 'marvellous',\n",
       " 'fortuitous',\n",
       " 'laudable',\n",
       " 'well-rounded',\n",
       " 'guiltless',\n",
       " 'ideal',\n",
       " 'hardier',\n",
       " 'miracles',\n",
       " 'capability',\n",
       " 'dependably',\n",
       " 'rock-star',\n",
       " 'razor-sharp',\n",
       " 'soulful',\n",
       " 'futurestic',\n",
       " 'jubilate',\n",
       " 'revel',\n",
       " 'regally',\n",
       " 'courtly',\n",
       " 'accessable',\n",
       " 'aspirations',\n",
       " 'vigilant',\n",
       " 'exultant',\n",
       " 'indebted',\n",
       " 'noteworthy',\n",
       " 'intricate',\n",
       " 'powerfully',\n",
       " 'deservedly',\n",
       " 'insightfully',\n",
       " 'amicably',\n",
       " 'illustrious',\n",
       " 'flutter',\n",
       " 'remarkably',\n",
       " 'readily',\n",
       " 'amaze',\n",
       " 'accomplish',\n",
       " 'undamaged',\n",
       " 'insightful',\n",
       " 'cost-saving',\n",
       " 'restored',\n",
       " 'stunned',\n",
       " 'satisfy',\n",
       " 'happiness',\n",
       " 'fresh',\n",
       " 'eloquently',\n",
       " 'first-class',\n",
       " 'qualified',\n",
       " 'achievable',\n",
       " 'electrify',\n",
       " 'exalting',\n",
       " 'astonish',\n",
       " 'progressive',\n",
       " 'flexible',\n",
       " 'helped',\n",
       " 'reasonably',\n",
       " 'idyllic',\n",
       " 'preferable',\n",
       " 'restructuring',\n",
       " 'improvements',\n",
       " 'elation',\n",
       " 'treasure',\n",
       " 'well-managed',\n",
       " 'honesty',\n",
       " 'resourcefulness',\n",
       " 'adore',\n",
       " 'rectify',\n",
       " 'verifiable',\n",
       " 'fast-growing',\n",
       " 'seasoned',\n",
       " 'continuity',\n",
       " 'affirmative',\n",
       " 'fantastic',\n",
       " 'fervid',\n",
       " 'interesting',\n",
       " 'magnificently',\n",
       " 'supple',\n",
       " 'jollify',\n",
       " 'dazzling',\n",
       " 'neatest',\n",
       " 'comfortable',\n",
       " 'creative',\n",
       " 'delight',\n",
       " 'excitement',\n",
       " 'wonderfully',\n",
       " 'elevate',\n",
       " 'fastest',\n",
       " 'appreciatively',\n",
       " 'uplifting',\n",
       " 'convenient',\n",
       " 'dominates',\n",
       " 'sumptuous',\n",
       " 'compatible',\n",
       " 'readable',\n",
       " 'permissible',\n",
       " 'tempting',\n",
       " 'well-informed',\n",
       " 'dexterously',\n",
       " 'convincingly',\n",
       " 'laud',\n",
       " 'impeccable',\n",
       " 'rewarding',\n",
       " 'acclaimed',\n",
       " 'privileged',\n",
       " 'surpass',\n",
       " 'chic',\n",
       " 'trumpet',\n",
       " 'recovery',\n",
       " 'compassionate',\n",
       " 'support',\n",
       " 'goood',\n",
       " 'fortunately',\n",
       " 'award',\n",
       " 'famous',\n",
       " 'joy',\n",
       " 'reverently',\n",
       " 'prolific',\n",
       " 'pep',\n",
       " 'reforms',\n",
       " 'acumen',\n",
       " 'unreal',\n",
       " 'dummy-proof',\n",
       " 'polite',\n",
       " 'soothe',\n",
       " 'faithfulness',\n",
       " 'quicker',\n",
       " 'clarity',\n",
       " 'consistently',\n",
       " 'cure',\n",
       " 'praising',\n",
       " 'excelled',\n",
       " 'glamorous',\n",
       " 'perfection',\n",
       " 'assurance',\n",
       " 'well-made',\n",
       " 'lower-priced',\n",
       " 'conscientious',\n",
       " 'rightfully',\n",
       " 'good',\n",
       " 'assuredly',\n",
       " 'cushy',\n",
       " 'loving',\n",
       " 'promises',\n",
       " 'time-honored',\n",
       " 'flashy',\n",
       " 'authoritative',\n",
       " 'better-than-expected',\n",
       " 'exaltingly',\n",
       " 'handily',\n",
       " 'praiseworthy',\n",
       " 'warmer',\n",
       " 'prodigious',\n",
       " 'improvement',\n",
       " 'incredible',\n",
       " 'subsidized',\n",
       " 'spirited',\n",
       " 'ecstatically',\n",
       " 'happier',\n",
       " 'available',\n",
       " 'fun',\n",
       " 'industrious',\n",
       " 'saver',\n",
       " 'subsidizes',\n",
       " 'unforgettable',\n",
       " 'balanced',\n",
       " 'gooood',\n",
       " 'fame',\n",
       " 'colorful',\n",
       " 'low-risk',\n",
       " 'cleanliness',\n",
       " 'tantalizingly',\n",
       " 'fancinating',\n",
       " 'awesomeness',\n",
       " 'pleases',\n",
       " 'worthiness',\n",
       " 'enthral',\n",
       " 'astounding',\n",
       " 'complement',\n",
       " 'energize',\n",
       " 'unaffected',\n",
       " 'graciousness',\n",
       " 'adaptable',\n",
       " 'promoter',\n",
       " 'palatial',\n",
       " 'virtuous',\n",
       " 'illuminati',\n",
       " 'felicitate',\n",
       " 'humane',\n",
       " 'steadiest',\n",
       " 'flatter',\n",
       " 'counter-attacks',\n",
       " 'prompt',\n",
       " 'genial',\n",
       " 'glorify',\n",
       " 'cure-all',\n",
       " 'surreal',\n",
       " 'staunchness',\n",
       " 'commendably',\n",
       " 'audibly',\n",
       " 'glistening',\n",
       " 'respectful',\n",
       " 'dead-cheap',\n",
       " 'politeness',\n",
       " 'zest',\n",
       " 'instantly',\n",
       " 'valiantly',\n",
       " 'eyecatching',\n",
       " 'versatility',\n",
       " 'respectfully',\n",
       " 'brighten',\n",
       " 'blissful',\n",
       " 'thrill',\n",
       " 'advantage',\n",
       " 'maneuverable',\n",
       " 'fascinate',\n",
       " 'ease',\n",
       " 'dote',\n",
       " 'confident',\n",
       " 'jovial',\n",
       " 'wieldy',\n",
       " 'useful',\n",
       " 'marvel',\n",
       " 'worthwhile',\n",
       " 'maturely',\n",
       " 'well-intentioned',\n",
       " 'shine',\n",
       " 'beautifully',\n",
       " 'easiest',\n",
       " 'ardently',\n",
       " 'merciful',\n",
       " 'astutely',\n",
       " 'impartially',\n",
       " 'impresses',\n",
       " 'irreplaceable',\n",
       " 'wows',\n",
       " 'affordable',\n",
       " 'receptive',\n",
       " 'greatness',\n",
       " 'vivid',\n",
       " 'nicest',\n",
       " 'frugal',\n",
       " 'pride',\n",
       " 'charismatic',\n",
       " 'gleefully',\n",
       " 'efficacious',\n",
       " 'pleasingly',\n",
       " 'beauteous',\n",
       " 'wellbeing',\n",
       " 'wholeheartedly',\n",
       " 'fragrant',\n",
       " 'ingeniously',\n",
       " 'dedicated',\n",
       " 'spellbindingly',\n",
       " 'splendid',\n",
       " 'nourishment',\n",
       " 'impartial',\n",
       " 'talent',\n",
       " 'endorse',\n",
       " 'sweeten',\n",
       " 'enviably',\n",
       " 'affluent',\n",
       " 'calming',\n",
       " 'tremendously',\n",
       " 'magnificence',\n",
       " 'righteousness',\n",
       " 'silent',\n",
       " 'remedy',\n",
       " 'charm',\n",
       " 'beautiful',\n",
       " 'impressively',\n",
       " 'beneficial',\n",
       " 'flourishing',\n",
       " 'deft',\n",
       " 'survival',\n",
       " 'supremacy',\n",
       " 'redeeming',\n",
       " 'cuteness',\n",
       " 'super',\n",
       " 'prospros',\n",
       " 'brilliant',\n",
       " 'kid-friendly',\n",
       " 'reverent',\n",
       " 'sensational',\n",
       " 'polished',\n",
       " 'enjoys',\n",
       " 'champion',\n",
       " 'mesmerizes',\n",
       " 'monumentally',\n",
       " 'articulate',\n",
       " 'contrasty',\n",
       " 'fearless',\n",
       " 'leads',\n",
       " 'satisfied',\n",
       " 'vigilance',\n",
       " 'prodigy',\n",
       " 'easygoing',\n",
       " 'gem',\n",
       " 'magnificent',\n",
       " 'evaluative',\n",
       " 'excellence',\n",
       " 'fidelity',\n",
       " 'reaffirmation',\n",
       " 'toll-free',\n",
       " 'keen',\n",
       " 'feat',\n",
       " 'elated',\n",
       " 'charming',\n",
       " 'lavish',\n",
       " 'wowing',\n",
       " 'miraculous',\n",
       " 'joyous',\n",
       " 'promptly',\n",
       " 'altruistic',\n",
       " 'overtaken',\n",
       " 'well',\n",
       " 'chivalrous',\n",
       " 'irreproachable',\n",
       " 'enjoying',\n",
       " 'praise',\n",
       " 'premier',\n",
       " 'portable',\n",
       " 'streamlined',\n",
       " 'eagerness',\n",
       " 'enough',\n",
       " 'invigorating',\n",
       " 'satisfying',\n",
       " 'astoundingly',\n",
       " 'pepped',\n",
       " 'freed',\n",
       " 'passionately',\n",
       " 'meticulous',\n",
       " 'sweetly',\n",
       " 'lead',\n",
       " 'admiringly',\n",
       " 'optimism',\n",
       " 'friendly',\n",
       " 'restful',\n",
       " 'awards',\n",
       " 'heartily',\n",
       " 'subsidizing',\n",
       " 'exceedingly',\n",
       " 'triumphal',\n",
       " 'friendliness',\n",
       " 'gracefully',\n",
       " 'fervidly',\n",
       " 'geeky',\n",
       " 'lovably',\n",
       " 'merit',\n",
       " 'profound',\n",
       " 'poise',\n",
       " 'amply',\n",
       " 'top-notch',\n",
       " 'exquisite',\n",
       " 'wondrous',\n",
       " 'euphoria',\n",
       " 'harmony',\n",
       " 'cool',\n",
       " 'sensible',\n",
       " 'adventurous',\n",
       " 'non-violence',\n",
       " 'solace',\n",
       " 'supporter',\n",
       " 'triumphantly',\n",
       " 'breakthrough',\n",
       " 'enchant',\n",
       " 'generous',\n",
       " 'low-cost',\n",
       " 'exceeding',\n",
       " 'grateful',\n",
       " 'safe',\n",
       " 'angelic',\n",
       " 'modesty',\n",
       " 'vouchsafe',\n",
       " 'flexibility',\n",
       " 'cherish',\n",
       " 'lover',\n",
       " 'enterprising',\n",
       " 'invincibility',\n",
       " 'accommodative',\n",
       " 'freedoms',\n",
       " 'extraordinary',\n",
       " 'lighter',\n",
       " 'nourish',\n",
       " 'outshone',\n",
       " 'excitedness',\n",
       " 'masterful',\n",
       " 'breathtaking',\n",
       " 'unquestionable',\n",
       " 'swankiest',\n",
       " 'user-replaceable',\n",
       " 'enlighten',\n",
       " 'stronger',\n",
       " 'illuminating',\n",
       " 'hopeful',\n",
       " 'darling',\n",
       " 'fertile',\n",
       " 'gainful',\n",
       " 'levity',\n",
       " 'saint',\n",
       " 'unfazed',\n",
       " 'fair',\n",
       " 'spellbound',\n",
       " 'perfect',\n",
       " 'peach',\n",
       " 'supurb',\n",
       " 'comforting',\n",
       " 'gains',\n",
       " 'fervently',\n",
       " 'retractable',\n",
       " 'overtake',\n",
       " 'goodly',\n",
       " 'glisten',\n",
       " 'venerate',\n",
       " 'well-balanced',\n",
       " 'prefered',\n",
       " 'luminous',\n",
       " 'morality',\n",
       " 'humor',\n",
       " 'unwavering',\n",
       " 'sprightly',\n",
       " 'enthusiast',\n",
       " 'sweeping',\n",
       " 'suffice',\n",
       " 'gusto',\n",
       " 'harmoniously',\n",
       " 'relish',\n",
       " 'accomplished',\n",
       " 'agreeable',\n",
       " 'dignified',\n",
       " 'pluses',\n",
       " 'fortune',\n",
       " 'divinely',\n",
       " 'kudos',\n",
       " 'breathlessness',\n",
       " 'slammin',\n",
       " 'invulnerable',\n",
       " 'glimmer',\n",
       " 'feasible',\n",
       " 'high-quality',\n",
       " 'reputation',\n",
       " 'happy',\n",
       " 'vibrant',\n",
       " 'reassure',\n",
       " 'impassioned',\n",
       " 'entrancing',\n",
       " 'succeed',\n",
       " 'sufficient',\n",
       " 'agile',\n",
       " 'joyfully',\n",
       " 'skill',\n",
       " 'well-established',\n",
       " 'extraordinarily',\n",
       " 'prudence',\n",
       " 'overtaking',\n",
       " 'brilliance',\n",
       " 'endearing',\n",
       " 'convient',\n",
       " 'relief',\n",
       " 'commodious',\n",
       " 'reasonable',\n",
       " 'appropriate',\n",
       " 'simplified',\n",
       " 'stimulates',\n",
       " 'glorious',\n",
       " 'civilize',\n",
       " 'empowerment',\n",
       " 'glowingly',\n",
       " 'greatest',\n",
       " 'romanticize',\n",
       " 'holy',\n",
       " 'patience',\n",
       " 'quieter',\n",
       " 'swankier',\n",
       " 'dumbfounded',\n",
       " 'success',\n",
       " 'nicer',\n",
       " 'marveled',\n",
       " 'conciliate',\n",
       " 'cleverly',\n",
       " 'extol',\n",
       " ...}"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pos_words"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8ab8a75",
   "metadata": {},
   "source": [
    "# Calculating the Sentiment Score\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "fb40e3e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "def function2(t):\n",
    "    s=nltk.word_tokenize(t)\n",
    "    temp = []\n",
    "    for i in s:\n",
    "        if i in pos_words:\n",
    "            temp.append(1)\n",
    "        elif i in neg_words:\n",
    "            temp.append(-1)\n",
    "        else:\n",
    "            temp.append(0)\n",
    "    if len(temp) == 0:\n",
    "        s = 0\n",
    "    else:\n",
    "        s = (sum(temp)/len(temp))\n",
    "    return s"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "ec2882ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.3333333333333333"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function2('good bad sad excellent nice awesome')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ffac588a",
   "metadata": {},
   "outputs": [],
   "source": [
    "my_reviews_dataset['Sentiment_Score'] = my_reviews_dataset['Cleansed_Message'].apply(function2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "325728b3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rating</th>\n",
       "      <th>Reviews</th>\n",
       "      <th>Cleansed_Message</th>\n",
       "      <th>Sentiment_Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>Great CD</td>\n",
       "      <td>great cd</td>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>One of the best game music soundtracks - for a...</td>\n",
       "      <td>one best game music soundtrack - game n't real...</td>\n",
       "      <td>0.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>Batteries died within a year ...</td>\n",
       "      <td>batteri die within year ...</td>\n",
       "      <td>-0.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>works fine, but Maha Energy is better</td>\n",
       "      <td>work fine , maha energi better</td>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>Great for the non-audiophile</td>\n",
       "      <td>great non-audiophil</td>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9995</th>\n",
       "      <td>2</td>\n",
       "      <td>Really Enjoyed it!</td>\n",
       "      <td>realli enjoy !</td>\n",
       "      <td>0.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9996</th>\n",
       "      <td>1</td>\n",
       "      <td>Disappointing PC interface/software</td>\n",
       "      <td>disappoint pc interface/softwar</td>\n",
       "      <td>-0.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9997</th>\n",
       "      <td>2</td>\n",
       "      <td>Love it Love it Love it</td>\n",
       "      <td>love love love</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9998</th>\n",
       "      <td>1</td>\n",
       "      <td>Faulty leg causing distress for my baby</td>\n",
       "      <td>faulti leg caus distress babi</td>\n",
       "      <td>-0.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9999</th>\n",
       "      <td>2</td>\n",
       "      <td>Fantastic Entertainer</td>\n",
       "      <td>fantast entertain</td>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10000 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Rating                                            Reviews  \\\n",
       "0          2                                           Great CD   \n",
       "1          2  One of the best game music soundtracks - for a...   \n",
       "2          1                   Batteries died within a year ...   \n",
       "3          2              works fine, but Maha Energy is better   \n",
       "4          2                       Great for the non-audiophile   \n",
       "...      ...                                                ...   \n",
       "9995       2                                 Really Enjoyed it!   \n",
       "9996       1                Disappointing PC interface/software   \n",
       "9997       2                            Love it Love it Love it   \n",
       "9998       1            Faulty leg causing distress for my baby   \n",
       "9999       2                              Fantastic Entertainer   \n",
       "\n",
       "                                       Cleansed_Message  Sentiment_Score  \n",
       "0                                              great cd         0.500000  \n",
       "1     one best game music soundtrack - game n't real...         0.100000  \n",
       "2                           batteri die within year ...        -0.200000  \n",
       "3                        work fine , maha energi better         0.500000  \n",
       "4                                   great non-audiophil         0.500000  \n",
       "...                                                 ...              ...  \n",
       "9995                                     realli enjoy !         0.333333  \n",
       "9996                    disappoint pc interface/softwar        -0.333333  \n",
       "9997                                     love love love         1.000000  \n",
       "9998                      faulti leg caus distress babi        -0.200000  \n",
       "9999                                  fantast entertain         0.500000  \n",
       "\n",
       "[10000 rows x 4 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_reviews_dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea147f3c",
   "metadata": {},
   "source": [
    "# Categorizing the Sentiment Scores\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "6cd7c912",
   "metadata": {},
   "outputs": [],
   "source": [
    "def function3(w):\n",
    "    temp = ''\n",
    "    if w > 0:\n",
    "        temp = 'Positive'\n",
    "    elif w < 0:\n",
    "        temp = 'Negative'\n",
    "    else:\n",
    "        temp = 'Positive'\n",
    "    return temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "d501dec8",
   "metadata": {},
   "outputs": [],
   "source": [
    "my_reviews_dataset['Sentiment'] = my_reviews_dataset['Sentiment_Score'].apply(function3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "5cc76c02",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rating</th>\n",
       "      <th>Reviews</th>\n",
       "      <th>Cleansed_Message</th>\n",
       "      <th>Sentiment_Score</th>\n",
       "      <th>Sentiment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>Great CD</td>\n",
       "      <td>great cd</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>One of the best game music soundtracks - for a...</td>\n",
       "      <td>one best game music soundtrack - game n't real...</td>\n",
       "      <td>0.100000</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>Batteries died within a year ...</td>\n",
       "      <td>batteri die within year ...</td>\n",
       "      <td>-0.200000</td>\n",
       "      <td>Negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>works fine, but Maha Energy is better</td>\n",
       "      <td>work fine , maha energi better</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>Great for the non-audiophile</td>\n",
       "      <td>great non-audiophil</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9995</th>\n",
       "      <td>2</td>\n",
       "      <td>Really Enjoyed it!</td>\n",
       "      <td>realli enjoy !</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9996</th>\n",
       "      <td>1</td>\n",
       "      <td>Disappointing PC interface/software</td>\n",
       "      <td>disappoint pc interface/softwar</td>\n",
       "      <td>-0.333333</td>\n",
       "      <td>Negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9997</th>\n",
       "      <td>2</td>\n",
       "      <td>Love it Love it Love it</td>\n",
       "      <td>love love love</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9998</th>\n",
       "      <td>1</td>\n",
       "      <td>Faulty leg causing distress for my baby</td>\n",
       "      <td>faulti leg caus distress babi</td>\n",
       "      <td>-0.200000</td>\n",
       "      <td>Negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9999</th>\n",
       "      <td>2</td>\n",
       "      <td>Fantastic Entertainer</td>\n",
       "      <td>fantast entertain</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10000 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Rating                                            Reviews  \\\n",
       "0          2                                           Great CD   \n",
       "1          2  One of the best game music soundtracks - for a...   \n",
       "2          1                   Batteries died within a year ...   \n",
       "3          2              works fine, but Maha Energy is better   \n",
       "4          2                       Great for the non-audiophile   \n",
       "...      ...                                                ...   \n",
       "9995       2                                 Really Enjoyed it!   \n",
       "9996       1                Disappointing PC interface/software   \n",
       "9997       2                            Love it Love it Love it   \n",
       "9998       1            Faulty leg causing distress for my baby   \n",
       "9999       2                              Fantastic Entertainer   \n",
       "\n",
       "                                       Cleansed_Message  Sentiment_Score  \\\n",
       "0                                              great cd         0.500000   \n",
       "1     one best game music soundtrack - game n't real...         0.100000   \n",
       "2                           batteri die within year ...        -0.200000   \n",
       "3                        work fine , maha energi better         0.500000   \n",
       "4                                   great non-audiophil         0.500000   \n",
       "...                                                 ...              ...   \n",
       "9995                                     realli enjoy !         0.333333   \n",
       "9996                    disappoint pc interface/softwar        -0.333333   \n",
       "9997                                     love love love         1.000000   \n",
       "9998                      faulti leg caus distress babi        -0.200000   \n",
       "9999                                  fantast entertain         0.500000   \n",
       "\n",
       "     Sentiment  \n",
       "0     Positive  \n",
       "1     Positive  \n",
       "2     Negative  \n",
       "3     Positive  \n",
       "4     Positive  \n",
       "...        ...  \n",
       "9995  Positive  \n",
       "9996  Negative  \n",
       "9997  Positive  \n",
       "9998  Negative  \n",
       "9999  Positive  \n",
       "\n",
       "[10000 rows x 5 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_reviews_dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "97e43b7c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Positive    8308\n",
       "Negative    1692\n",
       "Name: Sentiment, dtype: int64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_reviews_dataset['Sentiment'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "e70cb7ef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "my_reviews_dataset['Sentiment'].value_counts().plot(kind='bar')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79799920",
   "metadata": {},
   "source": [
    "# Evaluating the Model's Accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "716ff641",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Storing text in a variable\n",
    "mrd_x = my_reviews_dataset['Cleansed_Message']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "a29288c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Storing text sentiment in a variable\n",
    "mrd_y = my_reviews_dataset['Sentiment']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "e5db1606",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Selectig the train and test size\n",
    "X_train, X_test, y_train, y_test = train_test_split(mrd_x, mrd_y, test_size=0.30, random_state=20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "92e16d41",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8094                                         workmanship\n",
       "1008                                       materi flimsi\n",
       "8016                           good thought , one best .\n",
       "1964             's heat plate grow rusti within month .\n",
       "9844    live drum , live trumpet , live bass , live funk\n",
       "                              ...                       \n",
       "3915                                prequel flower attic\n",
       "9620                                               sad !\n",
       "7068                                      funnier expect\n",
       "7391                                             statist\n",
       "4367                                             problem\n",
       "Name: Cleansed_Message, Length: 7000, dtype: object"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "2a518650",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9957          anoth fine tale mcmurtri\n",
       "1687    best yoga video kid age & abil\n",
       "2116                one best book time\n",
       "231                   american treasur\n",
       "2780             morey ignor literatur\n",
       "                     ...              \n",
       "2210                            im jim\n",
       "2141             everi sinc saw one tv\n",
       "1036             well made extrem skew\n",
       "8987                     great qualiti\n",
       "981            switch goal - good movi\n",
       "Name: Cleansed_Message, Length: 3000, dtype: object"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "900b5be3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8094    Positive\n",
       "1008    Positive\n",
       "8016    Positive\n",
       "1964    Positive\n",
       "9844    Positive\n",
       "          ...   \n",
       "3915    Positive\n",
       "9620    Negative\n",
       "7068    Positive\n",
       "7391    Positive\n",
       "4367    Negative\n",
       "Name: Sentiment, Length: 7000, dtype: object"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "9efa0323",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9957    Positive\n",
       "1687    Positive\n",
       "2116    Positive\n",
       "231     Positive\n",
       "2780    Positive\n",
       "          ...   \n",
       "2210    Positive\n",
       "2141    Positive\n",
       "1036    Positive\n",
       "8987    Positive\n",
       "981     Positive\n",
       "Name: Sentiment, Length: 3000, dtype: object"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8ecc054f",
   "metadata": {},
   "source": [
    "# Vectorizing X_train and X_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "7b088eb4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Splitting on the data and initialising the vectors\n",
    "vectorizer = CountVectorizer()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "957cd21c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>CountVectorizer()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">CountVectorizer</label><div class=\"sk-toggleable__content\"><pre>CountVectorizer()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "CountVectorizer()"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fitting X_train in vectorizer\n",
    "vectorizer.fit(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "c9a7cb0c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<7000x4892 sparse matrix of type '<class 'numpy.int64'>'\n",
       "\twith 19512 stored elements in Compressed Sparse Row format>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#transforming X_train\n",
    "vectorizer.transform(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "299aec01",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Storing the transferred vector in a variable\n",
    "X_train_vector = vectorizer.transform(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "8a73f431",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test_vector = vectorizer.transform(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7542044b",
   "metadata": {},
   "source": [
    "# Encoding the Categories\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "c0266028",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Importing Label Encoder and initialising it\n",
    "LE = LabelEncoder()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "bd448e26",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LabelEncoder()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LabelEncoder</label><div class=\"sk-toggleable__content\"><pre>LabelEncoder()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LabelEncoder()"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Fitting y_train into the encoder\n",
    "LE.fit(y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "89240567",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Negative', 'Positive'], dtype=object)"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "LE.classes_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "6864c13a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 1, 1, ..., 1, 1, 0])"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Transforming y_train\n",
    "LE.transform(y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "466ca915",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Storing the transferred vector in a variable\n",
    "y_train_encoded = LE.transform(y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "04aece02",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_test_encoded = LE.transform(y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e491040",
   "metadata": {},
   "source": [
    "# Training the Model after Categorizing\n",
    "- X_train_vector\n",
    "- X_test_vector\n",
    "- y_train_encoded\n",
    "- y_test_encoded"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "672523b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Fitting the model\n",
    "LR=LogisticRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "5f19ca41",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Fitting th model\n",
    "LR_model = LR.fit(X_train_vector,y_train_encoded)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "9b81bfe4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 1, 1, ..., 1, 1, 1])"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Predicting the model\n",
    "LR.predict(X_test_vector)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "2752a223",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Storing the prediction in a variable\n",
    "LR_model_predicted = LR.predict(X_test_vector)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "82c595fd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 1, 1, ..., 1, 1, 1])"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test_encoded"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "dc90792c",
   "metadata": {},
   "outputs": [],
   "source": [
    "test_text = [\"Cristiano Ronaldo is the Greatest\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "65de9b32",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<1x4892 sparse matrix of type '<class 'numpy.int64'>'\n",
       "\twith 2 stored elements in Compressed Sparse Row format>"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Vectorizing the text\n",
    "vectorizer.transform(test_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "63311439",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Storing the vector in a variable\n",
    "text_vector_pos = vectorizer.transform(test_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "c0082214",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Positive'], dtype=object)"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "LE.inverse_transform([1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "8a349e41",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Positive'], dtype=object)"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Model's Prediction\n",
    "LE.inverse_transform(LR.predict(text_vector_pos))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d86bc819",
   "metadata": {},
   "source": [
    "# Model's Accuracy "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "id": "42f3e230",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.939"
      ]
     },
     "execution_count": 225,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy_score(y_test_encoded,LR_model_predicted)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "521fa036",
   "metadata": {},
   "source": [
    "# Confusion Matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "id": "300737f4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Storing the fitted values in a variable\n",
    "cm_model = confusion_matrix(y_test_encoded,LR_model_predicted)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "id": "53e1c049",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 333,  163],\n",
       "       [  20, 2484]])"
      ]
     },
     "execution_count": 180,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cm_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "id": "c7d18e26",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 226,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plotting the values in a heatmap\n",
    "sns.heatmap(cm_model, annot=True, fmt=\".1f\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ae7fb64",
   "metadata": {},
   "source": [
    "# Clustering and Vectorizing "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "id": "8d80b558",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Storing Cleansed message in a variable\n",
    "V = my_reviews_dataset['Cleansed_Message']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "id": "6a4cee1c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Fitting it inside a variable\n",
    "VECT = vectorizer.fit(V)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "id": "15368002",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Transforming X\n",
    "x_vector = vectorizer.transform(V)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52cadabc",
   "metadata": {},
   "source": [
    "# Clustering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "id": "16d91cf8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Initialising\n",
    "km = KMeans(n_clusters=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "id": "8161ca7b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Fitting the model\n",
    "km_model = km.fit(x_vector)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "id": "5ae5e7f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_km = km.predict(x_vector)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "id": "06f82bdc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 2, 1, 1, 1], dtype=int32)"
      ]
     },
     "execution_count": 191,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_km [0:30]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "id": "99121fd3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "27748.64070207681"
      ]
     },
     "execution_count": 192,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "km_model.inertia_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "id": "140b77bd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "temp = []\n",
    "for i in range(7):\n",
    "    km = KMeans(n_clusters = i+1)\n",
    "    km_model = km.fit(x_vector)\n",
    "    output = km_model.inertia_\n",
    "    temp.append(output)\n",
    "    \n",
    "plt.plot(range(7), temp, marker='o')\n",
    "plt.xlabel('Number of clusters')\n",
    "plt.ylabel('Distortion')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "id": "31244a89",
   "metadata": {},
   "outputs": [],
   "source": [
    "my_reviews_dataset['Clusters'] = x_km"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "id": "0250d866",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rating</th>\n",
       "      <th>Reviews</th>\n",
       "      <th>Cleansed_Message</th>\n",
       "      <th>Sentiment_Score</th>\n",
       "      <th>Sentiment</th>\n",
       "      <th>Clusters</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>Great CD</td>\n",
       "      <td>great cd</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>Positive</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>One of the best game music soundtracks - for a...</td>\n",
       "      <td>one best game music soundtrack - game n't real...</td>\n",
       "      <td>0.100000</td>\n",
       "      <td>Positive</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>Batteries died within a year ...</td>\n",
       "      <td>batteri die within year ...</td>\n",
       "      <td>-0.200000</td>\n",
       "      <td>Negative</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>works fine, but Maha Energy is better</td>\n",
       "      <td>work fine , maha energi better</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>Positive</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>Great for the non-audiophile</td>\n",
       "      <td>great non-audiophil</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>Positive</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9995</th>\n",
       "      <td>2</td>\n",
       "      <td>Really Enjoyed it!</td>\n",
       "      <td>realli enjoy !</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>Positive</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9996</th>\n",
       "      <td>1</td>\n",
       "      <td>Disappointing PC interface/software</td>\n",
       "      <td>disappoint pc interface/softwar</td>\n",
       "      <td>-0.333333</td>\n",
       "      <td>Negative</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9997</th>\n",
       "      <td>2</td>\n",
       "      <td>Love it Love it Love it</td>\n",
       "      <td>love love love</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>Positive</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9998</th>\n",
       "      <td>1</td>\n",
       "      <td>Faulty leg causing distress for my baby</td>\n",
       "      <td>faulti leg caus distress babi</td>\n",
       "      <td>-0.200000</td>\n",
       "      <td>Negative</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9999</th>\n",
       "      <td>2</td>\n",
       "      <td>Fantastic Entertainer</td>\n",
       "      <td>fantast entertain</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>Positive</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10000 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Rating                                            Reviews  \\\n",
       "0          2                                           Great CD   \n",
       "1          2  One of the best game music soundtracks - for a...   \n",
       "2          1                   Batteries died within a year ...   \n",
       "3          2              works fine, but Maha Energy is better   \n",
       "4          2                       Great for the non-audiophile   \n",
       "...      ...                                                ...   \n",
       "9995       2                                 Really Enjoyed it!   \n",
       "9996       1                Disappointing PC interface/software   \n",
       "9997       2                            Love it Love it Love it   \n",
       "9998       1            Faulty leg causing distress for my baby   \n",
       "9999       2                              Fantastic Entertainer   \n",
       "\n",
       "                                       Cleansed_Message  Sentiment_Score  \\\n",
       "0                                              great cd         0.500000   \n",
       "1     one best game music soundtrack - game n't real...         0.100000   \n",
       "2                           batteri die within year ...        -0.200000   \n",
       "3                        work fine , maha energi better         0.500000   \n",
       "4                                   great non-audiophil         0.500000   \n",
       "...                                                 ...              ...   \n",
       "9995                                     realli enjoy !         0.333333   \n",
       "9996                    disappoint pc interface/softwar        -0.333333   \n",
       "9997                                     love love love         1.000000   \n",
       "9998                      faulti leg caus distress babi        -0.200000   \n",
       "9999                                  fantast entertain         0.500000   \n",
       "\n",
       "     Sentiment  Clusters  \n",
       "0     Positive         0  \n",
       "1     Positive         1  \n",
       "2     Negative         1  \n",
       "3     Positive         2  \n",
       "4     Positive         0  \n",
       "...        ...       ...  \n",
       "9995  Positive         1  \n",
       "9996  Negative         1  \n",
       "9997  Positive         1  \n",
       "9998  Negative         1  \n",
       "9999  Positive         1  \n",
       "\n",
       "[10000 rows x 6 columns]"
      ]
     },
     "execution_count": 195,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_reviews_dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "id": "d633d928",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    9136\n",
       "0     667\n",
       "2     197\n",
       "Name: Clusters, dtype: int64"
      ]
     },
     "execution_count": 196,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_reviews_dataset['Clusters'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "id": "3d57b915",
   "metadata": {},
   "outputs": [],
   "source": [
    "mrd_cluster_0 = my_reviews_dataset[my_reviews_dataset['Clusters'] == 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "id": "39dab1ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "mrd_cluster_1 = my_reviews_dataset[my_reviews_dataset['Clusters'] == 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "id": "2c9924dd",
   "metadata": {},
   "outputs": [],
   "source": [
    "mrd_cluster_2 = my_reviews_dataset[my_reviews_dataset['Clusters'] == 2]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "172e9d07",
   "metadata": {},
   "source": [
    "# converting the clusters into strings in order to create wordclouds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "id": "b8e53bf1",
   "metadata": {},
   "outputs": [],
   "source": [
    "Cluster0 = str(mrd_cluster_0.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "id": "65b75d06",
   "metadata": {},
   "outputs": [],
   "source": [
    "Cluster1 = str(mrd_cluster_1.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "id": "a9f6f0a7",
   "metadata": {},
   "outputs": [],
   "source": [
    "Cluster2 = str(mrd_cluster_2.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "id": "a2efa93e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"[[2 'Great CD' 'great cd' 0.5 'Positive' 0]\\n [2 'Great for the non-audiophile' 'great non-audiophil' 0.5 'Positive' 0]\\n [2 'Great book for travelling Europe' 'great book travel europ' 0.25\\n  'Positive' 0]\\n ...\\n [2 'Great ideas!!' 'great idea ! !' 0.25 'Positive' 0]\\n [1 'Not great' 'great' 1.0 'Positive' 0]\\n [2 'Gift for my Great Nephew in Texas' 'gift great nephew texa' 0.25\\n  'Positive' 0]]\""
      ]
     },
     "execution_count": 230,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Cluster0"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43a7f3c8",
   "metadata": {},
   "source": [
    "# WordCloud for Cleansed Message"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "id": "bcdde781",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['great cd',\n",
       "       \"one best game music soundtrack - game n't realli play\",\n",
       "       'batteri die within year ...', ..., 'love love love',\n",
       "       'faulti leg caus distress babi', 'fantast entertain'], dtype=object)"
      ]
     },
     "execution_count": 208,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_reviews_dataset['Cleansed_Message'].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "id": "70cc1fec",
   "metadata": {},
   "outputs": [],
   "source": [
    "string = str(my_reviews_dataset['Cleansed_Message'].values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "id": "ba984632",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10000, 6)"
      ]
     },
     "execution_count": 211,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_reviews_dataset.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "id": "ae79b128",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "173"
      ]
     },
     "execution_count": 231,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(string)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b472f9e7",
   "metadata": {},
   "source": [
    "## Showing the WordCloud codes as markdown due to error in installing WordCloud library in the terminal."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e91cc0f0",
   "metadata": {},
   "source": [
    "stopwords = set(STOPWORDS)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91d4cbb3",
   "metadata": {},
   "source": [
    "wordcloud = WordCloud(stopwords = stopwords,background_color=\"black\").generate(string)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "45003476",
   "metadata": {},
   "source": [
    "plt.figure(figsize=(15,10))\n",
    "plt.imshow(wordcloud, interpolation='bilinear')\n",
    "plt.axis(\"off\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ce7a4da5",
   "metadata": {},
   "source": [
    "# Creating WordCloud for all the Clusters\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6eaffdb3",
   "metadata": {},
   "source": [
    "# Cluster 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d7e6970",
   "metadata": {},
   "source": [
    "wordcloud = WordCloud(stopwords = stopwords,background_color=\"black\").generate(Cluster0)\n",
    "plt.figure(figsize=(15,10))\n",
    "plt.imshow(wordcloud, interpolation='bilinear')\n",
    "plt.axis(\"off\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e89329c",
   "metadata": {},
   "source": [
    "# Cluster 2\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "90ebddfe",
   "metadata": {},
   "source": [
    "wordcloud = WordCloud(stopwords = stopwords,background_color=\"black\").generate(Cluster1)\n",
    "plt.figure(figsize=(15,10))\n",
    "plt.imshow(wordcloud, interpolation='bilinear')\n",
    "plt.axis(\"off\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "084f56c9",
   "metadata": {},
   "source": [
    "# Cluster 3 \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9c3e9ab6",
   "metadata": {},
   "outputs": [],
   "source": [
    "wordcloud = WordCloud(stopwords = stopwords,background_color=\"black\").generate(Cluster2)\n",
    "plt.figure(figsize=(15,10))\n",
    "plt.imshow(wordcloud, interpolation='bilinear')\n",
    "plt.axis(\"off\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "905396ea",
   "metadata": {},
   "source": [
    "# Displayed the WordClouds on readme file."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
